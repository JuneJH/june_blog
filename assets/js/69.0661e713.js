(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{485:function(t,a,r){"use strict";r.r(a);var s=r(62),i=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"spring"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[t._v("#")]),t._v(" Spring")]),t._v(" "),r("blockquote",[r("p",[t._v("控制反转")])]),t._v(" "),r("h2",{attrs:{id:"_1-ioc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-ioc"}},[t._v("#")]),t._v(" 1. IOC")]),t._v(" "),r("h2",{attrs:{id:"_2-di"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-di"}},[t._v("#")]),t._v(" 2. DI")]),t._v(" "),r("h2",{attrs:{id:"_3-aop"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-aop"}},[t._v("#")]),t._v(" 3. AOP")]),t._v(" "),r("blockquote",[r("p",[t._v("Aspect Oriented Programmiing 面向切面编程,解决横切关注点")]),t._v(" "),r("p",[t._v("在不修改代码的前提下,通过AOP增强目标类的功能,"),r("code",[t._v("预编译方式")]),t._v("和"),r("code",[t._v("运行期动态代理")])]),t._v(" "),r("p",[r("code",[t._v("JDK自带方式gclib方式")])])]),t._v(" "),r("h5",{attrs:{id:"_1-切面-aspect-切面是一个模块化单元-它横切关注点所定义的一组连接点-join-point-和增强-advice-。切面用于描述横切关注点的行为-例如日志记录、事务管理等。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-切面-aspect-切面是一个模块化单元-它横切关注点所定义的一组连接点-join-point-和增强-advice-。切面用于描述横切关注点的行为-例如日志记录、事务管理等。"}},[t._v("#")]),t._v(" 1. 切面（Aspect）：切面是一个模块化单元，它横切关注点所定义的一组连接点（Join Point）和增强（Advice）。切面用于描述横切关注点的行为，例如日志记录、事务管理等。")]),t._v(" "),r("h5",{attrs:{id:"_2-连接点-join-point-连接点是在应用程序执行过程中可以插入切面的点-例如方法的调用、异常抛出、属性访问等。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-连接点-join-point-连接点是在应用程序执行过程中可以插入切面的点-例如方法的调用、异常抛出、属性访问等。"}},[t._v("#")]),t._v(" 2. 连接点（Join Point）：连接点是在应用程序执行过程中可以插入切面的点，例如方法的调用、异常抛出、属性访问等。")]),t._v(" "),r("h5",{attrs:{id:"_3-增强-advice-增强定义了在连接点上执行的具体行为-它可以是在连接点之前、之后或周围执行的代码-用于实现切面的具体逻辑。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-增强-advice-增强定义了在连接点上执行的具体行为-它可以是在连接点之前、之后或周围执行的代码-用于实现切面的具体逻辑。"}},[t._v("#")]),t._v(" 3. 增强（Advice）：增强定义了在连接点上执行的具体行为，它可以是在连接点之前、之后或周围执行的代码，用于实现切面的具体逻辑。")]),t._v(" "),r("h5",{attrs:{id:"_4-切点-pointcut-切点是一组连接点的集合-它定义了切面的应用范围。通过切点表达式-可以选择特定的连接点作为切点。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-切点-pointcut-切点是一组连接点的集合-它定义了切面的应用范围。通过切点表达式-可以选择特定的连接点作为切点。"}},[t._v("#")]),t._v(" 4. 切点（Pointcut）：切点是一组连接点的集合，它定义了切面的应用范围。通过切点表达式，可以选择特定的连接点作为切点。")]),t._v(" "),r("h5",{attrs:{id:"_5-织入-weaving-织入是将切面应用到目标对象上的过程。spring-aop-提供两种织入方式-编译时织入和运行时织入。运行时织入是-spring-aop-的默认方式-它是在运行时通过动态代理实现切面的织入。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-织入-weaving-织入是将切面应用到目标对象上的过程。spring-aop-提供两种织入方式-编译时织入和运行时织入。运行时织入是-spring-aop-的默认方式-它是在运行时通过动态代理实现切面的织入。"}},[t._v("#")]),t._v(" 5. 织入（Weaving）：织入是将切面应用到目标对象上的过程。Spring AOP 提供两种织入方式：编译时织入和运行时织入。运行时织入是 Spring AOP 的默认方式，它是在运行时通过动态代理实现切面的织入。")])])}),[],!1,null,null,null);a.default=i.exports}}]);